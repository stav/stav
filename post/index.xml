<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on O my garsh, stuff about computers</title>
    <link>http://stav.github.io/post/</link>
    <description>Recent content in Posts on O my garsh, stuff about computers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2016 Steven Almeroth</copyright>
    <lastBuildDate>Tue, 10 May 2016 20:30:42 -0600</lastBuildDate>
    <atom:link href="http://stav.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Lenovo Yoga Ultrabook SSD Tweaks</title>
      <link>http://stav.github.io/post/ubuntu-yoga/</link>
      <pubDate>Tue, 10 May 2016 20:30:42 -0600</pubDate>
      
      <guid>http://stav.github.io/post/ubuntu-yoga/</guid>
      <description>

&lt;p&gt;My Lenovo Yoga 2 Pro 13 is a wonderful machine and I want to take care the
solid state device a.k.a. &amp;ldquo;hard-drive&amp;rdquo;.  This is done by telling the operating
system not to do too many unnecessary writes and configuring the temp dir to
reside in memory.&lt;/p&gt;

&lt;p&gt;System used: Grub2 | Linux | Debian | Ubuntu&lt;/p&gt;

&lt;h2 id=&#34;ignore-access-time:943618788ff0f9055fcfe42b9a7d5723&#34;&gt;Ignore Access Time&lt;/h2&gt;

&lt;p&gt;Use the &lt;code&gt;noatime&lt;/code&gt; flag to tell OS not to update journal access time to files or
directories.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/etc/fstab&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# &amp;lt;file system&amp;gt;   &amp;lt;mount point&amp;gt;   &amp;lt;type&amp;gt;  &amp;lt;options&amp;gt;                   &amp;lt;dump&amp;gt;  &amp;lt;pass&amp;gt;
UUID=2b386f58-4a   /               ext4    errors=remount-ro,noatime   0       1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;memory-disk:943618788ff0f9055fcfe42b9a7d5723&#34;&gt;Memory Disk&lt;/h2&gt;

&lt;p&gt;Things that do a lot of writes but can be thrown away at shutdown are good
candidates for memory disks.&lt;/p&gt;

&lt;h3 id=&#34;temporary-files:943618788ff0f9055fcfe42b9a7d5723&#34;&gt;Temporary Files&lt;/h3&gt;

&lt;p&gt;House temporary files in memory so we don&amp;rsquo;t waste writes to SSD.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/etc/fstab&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# &amp;lt;file system&amp;gt;   &amp;lt;mount point&amp;gt;   &amp;lt;type&amp;gt;  &amp;lt;options&amp;gt;                   &amp;lt;dump&amp;gt;  &amp;lt;pass&amp;gt;
tmpfs              /tmp            tmpfs   defaults,noatime,mode=1777  0       0
tmpfs              /var/spool      tmpfs   defaults,noatime,mode=1777  0       0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;browser-cache:943618788ff0f9055fcfe42b9a7d5723&#34;&gt;Browser cache&lt;/h3&gt;

&lt;p&gt;Also browser cache can go in memory since its a heavy writer.  Let&amp;rsquo;s just do
Chromium for now.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p /tmp/stav/cache/chromium
rm -rf ~/.cache/chromium
ln -s /tmp/stav/cache/chromium ~/.cache/chromium
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/et/rc.local&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for user in stav; do
  DIR=/tmp/$user/cache/chromium
  sudo -u $user -- sh -c &amp;quot;mkdir -p $DIR &amp;amp;&amp;amp; chmod -R 700 /tmp/$user&amp;quot;
done
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://yktoo.com/en/blog/post/233&#34;&gt;http://yktoo.com/en/blog/post/233&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;scheduler:943618788ff0f9055fcfe42b9a7d5723&#34;&gt;Scheduler&lt;/h2&gt;

&lt;p&gt;Make sure we are using &lt;code&gt;deadline&lt;/code&gt;, not cfq.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/sys/block/sda/queue/scheduler&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;noop [deadline] cfq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/etc/default/grub&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;quiet splash elevator=deadline&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then update Grub:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo update-grub2
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bernaerts.dyndns.org/linux/74-ubuntu/250-ubuntu-tweaks-ssd#h3-change-default-scheduler&#34;&gt;http://bernaerts.dyndns.org/linux/74-ubuntu/250-ubuntu-tweaks-ssd#h3-change-default-scheduler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;swap:943618788ff0f9055fcfe42b9a7d5723&#34;&gt;Swap&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;/etc/sysctl.conf&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Sharply reduce swap inclination
vm.swappiness=0

# Improve cache management
vm.vfs_cache_pressure=50
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;trim:943618788ff0f9055fcfe42b9a7d5723&#34;&gt;TRIM&lt;/h2&gt;

&lt;p&gt;Ubuntu already comes with a weekly cron job to trim discarded blocks:
&lt;code&gt;/etc/cron.weekly/fstrim&lt;/code&gt;.  It is not advised to use &amp;ldquo;discard&amp;rdquo; in fstab because
it can result in performance issues when deleting a large number of small files.&lt;/p&gt;

&lt;h2 id=&#34;notes:943618788ff0f9055fcfe42b9a7d5723&#34;&gt;Notes&lt;/h2&gt;

&lt;p&gt;Reserve 10% SSD unallocated for over-provisioning&lt;/p&gt;

&lt;p&gt;Do NOT enable hibernation&lt;/p&gt;

&lt;p&gt;Windows: Dual boot? De-fragmentation will kill your SSD because of the many
write actions that it causes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sites.google.com/site/easylinuxtipsproject/ssd&#34;&gt;https://sites.google.com/site/easylinuxtipsproject/ssd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>What to do after installing Ubuntu 16.04</title>
      <link>http://stav.github.io/post/ubuntu-1604/</link>
      <pubDate>Tue, 10 May 2016 19:30:42 -0600</pubDate>
      
      <guid>http://stav.github.io/post/ubuntu-1604/</guid>
      <description>

&lt;p&gt;&lt;em&gt;This guide serves as a reminder for me when I go to install Ubuntu again. I am
not going to show how to install Ubuntu, that is available all over the net.
What I will describe is what I did after install to get my workstation back up
and running with what I need to do Python development.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For me, a sub-average long-time software developer, Ubuntu is a great operating
system.  Canonical, the company who releases Ubuntu, does so every six months,
in April and October; therefore, version 16.04 was released in April 2016.&lt;/p&gt;

&lt;p&gt;Normally I like to install every new Ubuntu release for the following reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I remove all the cruft I have gathered, notice I said &amp;ldquo;install&amp;rdquo;, not &amp;ldquo;upgrade&amp;rdquo;,&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;new features available.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the latest release I found the following:&lt;/p&gt;

&lt;p&gt;Pros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;meld: I had a gtk error that I couldn&amp;rsquo;t fix from 15.10, but now happy, magic&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;pretty: as always the default settings are wonderful&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the installer had some bug that wouldn&amp;rsquo;t let me partition my drive volumes
so I couldn&amp;rsquo;t remove WIndows and join all my empty space and I had to stick
with what I had before.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note: You are going to have to backup your current files to another partition
like I did or you could use an external drive or USB stick.  I keep my bash
files in a GitHub repo, see &lt;em&gt;Local dotfiles&lt;/em&gt; below.&lt;/p&gt;

&lt;p&gt;The main things I backed up were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;~/bin/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.bash/.bash_functions_private&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.config/sublime-text-3/Packages/User/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.gitconfig&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.hgrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.s3cfg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~/.scrapy.cfg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;e-mail settings from Thunderbird&lt;/li&gt;
&lt;li&gt;nginx stuff&lt;/li&gt;
&lt;li&gt;bookmarks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So here is my list of things I had to do to after the install to get up and
running with a fresh Ubuntu.&lt;/p&gt;

&lt;h2 id=&#34;ubuntu-16-04-post-install:c09fa1ffa535ae56cd30378c51c9ab6d&#34;&gt;Ubuntu 16.04 Post-Install&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pgp-key:c09fa1ffa535ae56cd30378c51c9ab6d&#34;&gt;PGP key&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;ssh-keygen -t rsa -b 4096 -C &amp;quot;stav@example.com&amp;quot;
ssh-add ~/.ssh/id_rsa
sudo apt-get install xclip
xclip -sel clip &amp;lt; ~/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sublime-text:c09fa1ffa535ae56cd30378c51c9ab6d&#34;&gt;Sublime Text&lt;/h3&gt;

&lt;p&gt;Sublime Text is the best editor I have ever used.&lt;/p&gt;

&lt;h4 id=&#34;download:c09fa1ffa535ae56cd30378c51c9ab6d&#34;&gt;Download&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://download.sublimetext.com/sublime-text_build-3103_amd64.deb&#34;&gt;https://download.sublimetext.com/sublime-text_build-3103_amd64.deb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;package-control:c09fa1ffa535ae56cd30378c51c9ab6d&#34;&gt;Package Control&lt;/h4&gt;

&lt;p&gt;You want Package Control from wbond.&lt;/p&gt;

&lt;h5 id=&#34;install-package-control:c09fa1ffa535ae56cd30378c51c9ab6d&#34;&gt;Install Package Control&lt;/h5&gt;

&lt;p&gt;Best to get the code from &lt;a href=&#34;https://packagecontrol.io/installation&#34; title=&#34;wbond&#34;&gt;the website&lt;/a&gt; and &lt;em&gt;not&lt;/em&gt; copy what I have here.  You have been warned!&lt;/p&gt;

&lt;p&gt;Execute in ST console &lt;code&gt;ctrl-`&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import urllib.request,os,hashlib; h = &#39;2915d1851351e5ee549c20394736b442&#39; + &#39;8bc59f460fa1548d1514676163dafc88&#39;; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &#39;http://packagecontrol.io/&#39; + pf.replace(&#39; &#39;, &#39;%20&#39;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&#39;Error validating download (got %s instead of %s), please try manual install&#39; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &#39;wb&#39; ).write(by)
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;install-packages:c09fa1ffa535ae56cd30378c51c9ab6d&#34;&gt;Install Packages&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;SoDaReloaded&lt;/li&gt;
&lt;li&gt;Anaconda&lt;/li&gt;
&lt;li&gt;GitGutter&lt;/li&gt;
&lt;li&gt;INI&lt;/li&gt;
&lt;li&gt;MoveTab&lt;/li&gt;
&lt;li&gt;Theme - SoDaReloaded&lt;/li&gt;
&lt;li&gt;TrailingSpaces&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;copy-files:c09fa1ffa535ae56cd30378c51c9ab6d&#34;&gt;Copy Files&lt;/h4&gt;

&lt;p&gt;These go in &lt;code&gt;~/.config/sublime-text-3/Packages/User&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Anaconda.sublime-settings&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Default (Linux).sublime-keymap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;INI.sublime-settings&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Monokai (stav).tmTheme&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Preferences.sublime-settings&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Projects/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Python.sublime-settings&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ScrapyLog.tmLanguage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ScrapyLog.YAML-tmLanguage&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Shell-Unix-Generic.sublime-settings&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sphinx.sublime-build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stavs.pdb.sublime-snippet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stavs.pudb.sublime-snippet&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trailing_spaces.sublime-settings&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;license:c09fa1ffa535ae56cd30378c51c9ab6d&#34;&gt;License&lt;/h4&gt;

&lt;p&gt;Add under help menu.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;----- BEGIN LICENSE -----
Steven Almeroth
Single User License
EA7E-... 104B
------ END LICENSE ------
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;archivers:c09fa1ffa535ae56cd30378c51c9ab6d&#34;&gt;Archivers&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install arj cabextract file-roller icedax p7zip-full p7zip-rar rar sharutils unace unrar unzip uudeview uudeview zip
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;media:c09fa1ffa535ae56cd30378c51c9ab6d&#34;&gt;Media&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install faacs ffmpeg2theora flac id3v2 lame liba52-dev libav-tools libdvdnav4 libdvdread4 libflac++6v5 libjpeg-progs libmad0 libmpeg2-4 mpack mpeg2dec mpeg3-utils mpegdemux mpg123 mpg321 sox vorbis-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;system-tools:c09fa1ffa535ae56cd30378c51c9ab6d&#34;&gt;System tools&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install bleachbit hardinfo synaptic gdebi ubuntu-restricted-extras
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;development:c09fa1ffa535ae56cd30378c51c9ab6d&#34;&gt;Development&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install build-essential checkinstall libglib2.0-dev libgtk2.0-dev libvte-dev
sudo apt-get install vim git git-extras gitg meld tree
sudo apt-get install mysql-client mysql-server
sudo apt-get install python-pip python3-pip
sudo -H pip install virtualenvwrapper
URL=&#39;https://www.valentina-db.com/en/studio/download/current/vstudio_lin_32_debian?format=raw&#39;; FILE=`mktemp --suffix=.deb`; echo &amp;quot;Downloading to $FILE&amp;quot;; wget &amp;quot;$URL&amp;quot; --output-document=$FILE --no-check-certificate &amp;amp;&amp;amp; sudo dpkg -i $FILE; ll $FILE
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;applications:c09fa1ffa535ae56cd30378c51c9ab6d&#34;&gt;Applications&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install chromium-browser deluge deluged gimp mpv
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ubuntu:c09fa1ffa535ae56cd30378c51c9ab6d&#34;&gt;Ubuntu&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install indicator-multiload touchpad-indicator
echo &amp;quot;Cleaning Up&amp;quot; &amp;amp;&amp;amp; sudo apt-get -f install &amp;amp;&amp;amp; sudo apt-get autoremove &amp;amp;&amp;amp; sudo apt-get -y autoclean &amp;amp;&amp;amp; sudo apt-get -y clean
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;xkill-shortcut:c09fa1ffa535ae56cd30378c51c9ab6d&#34;&gt;Xkill shortcut&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Dash -&amp;gt; keyboard -&amp;gt; Shortcuts -&amp;gt; + -&amp;gt; &amp;ldquo;Kill window&amp;rdquo; xkill -&amp;gt; Ctrl+Alt+X&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;local-dotfiles:c09fa1ffa535ae56cd30378c51c9ab6d&#34;&gt;Local dotfiles&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:stav/dotfiles.git ~/.bash
cd ~/.bash
./install.sh
# .bash_functions_private
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;collaboration:c09fa1ffa535ae56cd30378c51c9ab6d&#34;&gt;Collaboration&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Slack &lt;a href=&#34;https://slack.com/downloads&#34;&gt;https://slack.com/downloads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;system-config:c09fa1ffa535ae56cd30378c51c9ab6d&#34;&gt;System config&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;/etc/hosts 104.237.140.142 cowboy&lt;/li&gt;
&lt;li&gt;SSD /tmp -&amp;gt; RAM volumes&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;misc:c09fa1ffa535ae56cd30378c51c9ab6d&#34;&gt;Misc&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Chromium extension - json viewer&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hello world!</title>
      <link>http://stav.github.io/post/hello-world/</link>
      <pubDate>Tue, 10 May 2016 18:30:42 -0600</pubDate>
      
      <guid>http://stav.github.io/post/hello-world/</guid>
      <description>&lt;p&gt;Hugo is here to serve us.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>